DROP TABLE IF EXISTS rating_mpa, film_storage, genre, film_genre, likes, user_storage, friends;

CREATE TABLE IF NOT EXISTS rating_mpa (
    id_rating_mpa INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_storage (
    id_film INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    description VARCHAR(200),
    duration INT CHECK (duration > 0),
    name VARCHAR(255) NOT NULL,
    id_rating_mpa INT REFERENCES rating_mpa(id_rating_mpa),
    release_date DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS genre (
    id_genre INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genre (
    id_film INT NOT NULL REFERENCES film_storage(id_film),
    id_genre INT NOT NULL REFERENCES genre(id_genre),
    PRIMARY KEY (id_film, id_genre)
);

CREATE TABLE IF NOT EXISTS likes (
    id_film INT NOT NULL REFERENCES film_storage(id_film),
    id_user INT NOT NULL,
    PRIMARY KEY (id_film, id_user)
);

CREATE TABLE IF NOT EXISTS user_storage (
    id_user INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    birthday DATE NOT NULL,
    email VARCHAR(255) NOT NULL CHECK (email ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
    login VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS friends (
    id_user INT NOT NULL REFERENCES user_storage(id_user),
    id_friend INT NOT NULL,
    PRIMARY KEY (id_user, id_friend)
);